# Generated by Django 5.1.1 on 2025-03-12 18:26

import api.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('items', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('total', models.DecimalField(decimal_places=2, default=0.0, max_digits=6, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('items', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('total', models.DecimalField(decimal_places=2, default=0.0, max_digits=6, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=150, validators=[django.core.validators.RegexValidator('^[a-zA-Z ]+$', message='No special characters allowed'), django.core.validators.RegexValidator('^\\S+( \\S+)*$', message='Only one space between words')])),
                ('last_name', models.CharField(max_length=150, validators=[django.core.validators.RegexValidator('^[a-zA-Z ]+$', message='No special characters allowed'), django.core.validators.RegexValidator('^\\S+( \\S+)*$', message='Only one space between words')])),
                ('phone_number', models.CharField(max_length=11, unique=True, validators=[django.core.validators.RegexValidator('^07(\\d{8,9})$', message='Must be 10 or 11 digit number starting with 07')])),
                ('rating', models.DecimalField(blank=True, decimal_places=1, default=0.0, max_digits=2, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('description', models.TextField(blank=True, validators=[django.core.validators.RegexValidator('^\\S+( \\S+)*$', message='Only one space between words')])),
                ('theme_preference', models.CharField(choices=[('light', 'light'), ('dark', 'dark')], default='light', max_length=5)),
                ('mode', models.CharField(choices=[('buyer', 'buyer'), ('seller', 'seller')], default='buyer', max_length=6)),
                ('currency', models.CharField(choices=[('USD', 'USD'), ('GBP', 'GBP'), ('EUR', 'EUR')], default='GBP', max_length=3)),
                ('groups', models.ManyToManyField(blank=True, related_name='new_user_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='new_user_permissions_set', to='auth.permission')),
                ('cart', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user', to='api.cart')),
                ('wishlist', models.OneToOneField(default=api.models.create_wishlist, on_delete=django.db.models.deletion.CASCADE, related_name='user', to='api.wishlist')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_line', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]+( [a-zA-Z0-9]+)*$', message='No special characters allowed'), django.core.validators.RegexValidator('^\\S+( \\S+)*$', message='Only one space between words')])),
                ('second_line', models.CharField(blank=True, max_length=255, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]+( [a-zA-Z0-9]+)*$', message='No special characters allowed'), django.core.validators.RegexValidator('^\\S+( \\S+)*$', message='Only one space between words')])),
                ('city', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]+( [a-zA-Z0-9]+)*$', message='No special characters allowed'), django.core.validators.RegexValidator('^\\S+( \\S+)*$', message='Only one space between words')])),
                ('postcode', models.CharField(max_length=7, validators=[django.core.validators.RegexValidator('^[A-Za-z0-9]{5,7}$', message='Enter 5-7 character postcode without spaces')])),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='address', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Messages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user1_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('user2_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_edited', models.DateTimeField(default=django.utils.timezone.now)),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user1', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user2', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(blank=True)),
                ('sent', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
                ('messages', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message', to='api.messages')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Placed', 'Placed'), ('Processing', 'Processing'), ('Cancelled', 'Cancelled'), ('Return Rejected', 'Return Rejected'), ('Dispatched', 'Dispatched'), ('Complete', 'Complete'), ('Requested Return', 'Requested Return'), ('Being Returned', 'Being Returned'), ('Refunded', 'Refunded')], default='Placed', max_length=16)),
                ('estimated_delivery_date', models.DateField()),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('delivery_image', models.ImageField(blank=True, upload_to='delivery_images/')),
                ('return_method', models.CharField(choices=[('Delivery', 'Delivery'), ('Collection', 'Collection')], default='Delivery', max_length=10)),
                ('is_exchange', models.BooleanField(default=False)),
                ('return_reason', models.TextField(blank=True, validators=[django.core.validators.RegexValidator('^\\S+( \\S+)*$', message='Only one space between words')])),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buyer', to=settings.AUTH_USER_MODEL)),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seller', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]+(( [a-zA-Z0-9]+)*(: [a-zA-Z0-9]+)*(- [a-zA-Z0-9]+)*(\\\'[a-zA-Z0-9]+)*(, [a-zA-Z0-9]+)*(\\([a-zA-Z0-9]+\\))*(\\[[a-zA-Z0-9]+\\])*("[a-zA-Z0-9]+")*)*$', message='Invalid format')])),
                ('description', models.TextField(blank=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]+(( [a-zA-Z0-9]+)*(: [a-zA-Z0-9]+)*(- [a-zA-Z0-9]+)*(\\\'[a-zA-Z0-9]+)*(, [a-zA-Z0-9]+)*(\\([a-zA-Z0-9]+\\))*(\\[[a-zA-Z0-9]+\\])*("[a-zA-Z0-9]+")*)*$', message='Invalid format')])),
                ('height', models.DecimalField(decimal_places=2, max_digits=6)),
                ('width', models.DecimalField(decimal_places=2, max_digits=6)),
                ('weight', models.DecimalField(decimal_places=2, max_digits=6)),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('stock', models.DecimalField(decimal_places=2, max_digits=6)),
                ('estimated_delivery_time', models.DecimalField(decimal_places=2, max_digits=6)),
                ('subject', models.CharField(max_length=150, validators=[django.core.validators.RegexValidator('^[a-zA-Z]+( [a-zA-Z]+)*$', message='Invalid format')])),
                ('author', models.CharField(max_length=150, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]+( [a-zA-Z0-9]+)*$', message='Invalid format')])),
                ('self_made', models.BooleanField()),
                ('is_draft', models.BooleanField()),
                ('unique', models.BooleanField(default=True)),
                ('allow_delivery', models.BooleanField(default=False)),
                ('allow_collection', models.BooleanField(default=False)),
                ('allow_return', models.BooleanField(default=False)),
                ('page_start', models.IntegerField(blank=True)),
                ('page_end', models.IntegerField(blank=True)),
                ('height_unit', models.CharField(choices=[('cm', 'cm'), ('m', 'm'), ('in', 'in')], max_length=2)),
                ('width_unit', models.CharField(choices=[('cm', 'cm'), ('m', 'm'), ('in', 'in')], max_length=2)),
                ('image1', models.ImageField(upload_to='resource_images/')),
                ('image2', models.ImageField(upload_to='resource_images/')),
                ('video', models.FileField(upload_to='resource_videos/')),
                ('upload_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_edited', models.DateTimeField(auto_now=True)),
                ('rating', models.DecimalField(blank=True, decimal_places=1, default=0.0, max_digits=2, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('weight_unit', models.CharField(choices=[('lb', 'lb'), ('kg', 'kg'), ('ml', 'ml'), ('L', 'L'), ('mg', 'mg'), ('oz', 'oz')], max_length=2)),
                ('price_currency', models.CharField(choices=[('USD', 'USD'), ('GBP', 'GBP'), ('EUR', 'EUR')], default='GBP', max_length=3)),
                ('estimated_delivery_units', models.CharField(choices=[('day', 'day'), ('minute', 'minute'), ('hour', 'hour'), ('week', 'week'), ('month', 'month')], max_length=7)),
                ('type', models.CharField(choices=[('Textbook', 'Textbook'), ('Notes', 'Notes'), ('Stationery', 'Stationery')], max_length=10)),
                ('colour', models.CharField(choices=[('Black', 'Black'), ('Red', 'Red'), ('Yellow', 'Yellow'), ('Pink', 'Pink'), ('Purple', 'Purple'), ('Green', 'Green'), ('Blue', 'Blue'), ('White', 'White'), ('Orange', 'Orange'), ('Brown', 'Brown'), ('Grey', 'Grey')], max_length=6)),
                ('source', models.CharField(blank=True, choices=[('AI', 'AI'), ('Internet', 'Internet'), ('None', 'None')], max_length=8)),
                ('condition', models.CharField(choices=[('New', 'New'), ('Used', 'Used')], max_length=4)),
                ('media', models.CharField(blank=True, choices=[('Online', 'Online'), ('Paper', 'Paper')], max_length=6)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listing', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrderResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField()),
                ('for_return', models.BooleanField(default=False)),
                ('number_for_return', models.IntegerField(default=0)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_resource', to='api.order')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource', to='api.resource')),
            ],
        ),
        migrations.CreateModel(
            name='Exchange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status1', models.CharField(choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')], default='Pending', max_length=10)),
                ('status2', models.CharField(choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')], default='Pending', max_length=10)),
                ('resource1_number', models.IntegerField(default=0)),
                ('resource2_number', models.IntegerField(default=0)),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exchange_user1', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exchange_user2', to=settings.AUTH_USER_MODEL)),
                ('resource1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resource1', to='api.resource')),
                ('resource2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource2', to='api.resource')),
            ],
        ),
        migrations.CreateModel(
            name='CartResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField()),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_resource', to='api.cart')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_resource', to='api.resource')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.DecimalField(blank=True, decimal_places=1, default=0.0, max_digits=2, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('title', models.CharField(max_length=150, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]+(( [a-zA-Z0-9]+)*(: [a-zA-Z0-9]+)*(- [a-zA-Z0-9]+)*(\\\'[a-zA-Z0-9]+)*(, [a-zA-Z0-9]+)*(\\([a-zA-Z0-9]+\\))*(\\[[a-zA-Z0-9]+\\])*("[a-zA-Z0-9]+")*)*[\\.!\\?]*$', message='Invalid format')])),
                ('review', models.TextField(blank=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]+(( [a-zA-Z0-9]+)*(: [a-zA-Z0-9]+)*(- [a-zA-Z0-9]+)*(\\\'[a-zA-Z0-9]+)*(, [a-zA-Z0-9]+)*(\\([a-zA-Z0-9]+\\))*(\\[[a-zA-Z0-9]+\\])*("[a-zA-Z0-9]+")*)*[\\.!\\?]*$', message='Invalid format')])),
                ('upload_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('image', models.ImageField(blank=True, upload_to='review_images/')),
                ('video', models.FileField(blank=True, upload_to='review_videos/')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review', to='api.resource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SearchHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='search_history', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SearchHistoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('search', models.TextField()),
                ('search_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_item', to='api.searchhistory')),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, validators=[django.core.validators.RegexValidator('^[a-zA-Z]+( [a-zA-Z]+)*$', message='Invalid format')])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WishlistResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlist_resource', to='api.resource')),
                ('wishlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlist_resource', to='api.wishlist')),
            ],
        ),
    ]
